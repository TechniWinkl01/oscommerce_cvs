The Exchange Project Preview Release 2.1 Coding Standards Practice

** THIS DOCUMENT IS A DRAFT **

In order to keep the source code sane, a standard has to be followed
in the practice. Everyone has their own coding style, which has
advantages and disadvantages to somebody elses style. This document
will force a unified way to write code, while at the same time
allow for modifications to be made, to provide an optimial standard.

A general note regarding PHP3 and PHP4 compatibilty, developers are
requried to test their changes under both environments. Code may work
in PHP4, but may not in PHP3, and vica-versa.

Read the PHP installation guide, on how to install both PHP3 and PHP4
together on the same server.

PHP3 Compatibility Issues
-------------------------
* Something that will be done once the template structure has been
  implemented, is to change all <? php start tags to <?php for proper
  compatibility.

* It is best to define the constants early before 'includes' are made,
  as these includes cannot access constants that are set after the
  file has been 'included'. For example,
  
  define('TEXT', 'This text is shown in the include file');
  include('include_file.php');

* Classes that are called without parameters should be called as

  new className;
  
  and not as
  
  new className();

* Do not use the short version of echo, this will not work under PHP3.
  Please get in the habit of writing
  
  <?php echo $variable; ?>

  instead of
  
  <?=$varaible;?>


General
-------

* TABs should not be used as a indentations. To indent, use 2 whitespaces


Function Structure
------------------

* All custom functions should start with tep_

  function tep_my_function($parameter, $optional = '') {
    global $HTTP_GET_VARS, $another_variable;
    
    <function code>
    
    return true;
  }


Class Structure
---------------
* Class names should be in this format -> myWorkingClass

  class myWorkingClass {
    var $variable;
    
// class constuctor
    function myWorkingClass() {
    
      <function code>
    
      return true;
    }

// class methods
    function do_something() {
    
      $this->variable = 'set';
      
      return tue;
    }
  }
  
  $class = new myWorkingClass;
  $class->do_something();


Function Comments
-----------------

The support site uses an application called PHPXref which cross-
references inline comments with functions.

PHPXref requires that you comment your files in a certain style
for your entries to be used as documentation.

There are a few different comments that PHPXref recognizes:

1) File description:
   This provides a one line summary of what the file is and will
   show up in the directory listings.  To use it you should place
   one comment near the top of each file in the following format:

// filename.php - This is a description of the file called filename.php

   ie. the line must begin with '//' followed by the name of the
   file, followed by a hyphen and then the description.

   If you need an extra line then add one in the same format:

// filename.php - This is a description of the file called filename.php
// filename.php - that needs two lines to describe it

   You can also designate an author for the file by adding a line
   thus:

// filename.php - author: gareth,james

2) Function description:
   The main reason this script exists is to provide a means of
   documenting each function in use.  Each description consists
   of a one line summary and a long description.

   Example:

////
// !A short summary about what this function does
// A longer, more complete description would go here
// We might include details of what the function parameters do and what the 
// result should be, etc.
function example_function($foo) {
        ...
}

   Points to note: The description must begin with four forward
   slashes "////" on a line by itself.  

   The one line summary must begin with "// !" (note the
   exclamation mark).

   The remainder of the description must begin with "// " on each line

   The function declaration should immediately follow the description.

3) Table references:
   As the parser has no reliable means of determining when you reference
   a database table in your code (ie. you may be referencing by variable,
   etc) you need to give it a hint by using a comment in the following
   style:

// TABLES: table1, table2, table3

   You can insert these comments anywhere in your scripts.  I recommend
   adding them to the end of each function description to note what
   tables that function uses.