Usuage
------

It is recommended to read the article online at
http://www.zend.com/zend/tut/currency-exchange.php.

This script requires atleast PHP 4.0.1pl2

--------------------------------------------------

Using PHP with O&A's Currency Exchange Rate Server
By Guy N. Hurst 

February 21, 2001 
Intended Audience
Overview
Learning Objectives
Definitions
Background Information
Prerequisites
How it Works
The Script

Intended Audience
This tutorial is for those of you needing the services of the OANDA currency rate server,
especially if you develop shopping carts or other e-commerce services for online use. It
will also serve as an example of using PHP's capability to connect to a remote server.
Lastly, if you have a Unix-based system, the section on using cron may be useful to you. 

Overview
Olsen & Associates has made its Foreign Exchange Protocol (FXP) available online as the
OANDA Currency Rate Server. A description of FXP will be given and a PHP script will
interface with OANDA using this protocol.

This tutorial also shows you how to use PHP to get information from a remote server and
store it in an include file. An optional cron setup is described for use with the CGI
version of PHP to update the currency rates daily.

I do not implement the entire FXP in this tutorial, but only a portion of it (for example,
I do not deal with multiple bids etc...). The intention is to give a jump-start to those
users looking for a back-end solution. If there is a strong enough demand for this service,
we can follow this tutorial up with a subsequent one covering FXP's other features.

Learning Objectives
In this tutorial you will learn how to:

Interface with OANDA using PHP's new socket capabilities. 


Manipulate an include file. 


Use cron to run the PHP script daily. 
You will also be able to apply the following functions:

fsockopen() 


fputs() 


fgets() 


fclose() 


trim() 


split() 


substr() 


Definitions
OANDA : a global leader in currency conversion; covers over 160 currencies, available in 7
languages. OANDA has one of the world's largest historical, high frequency, filtered
currency databases.

FXP : Foreign Exchange Protocol, used by OANDA

Socket : An endpoint for communication; has an address consisting of a host-port pair and
a designated service such as TCP.

Lynx : Text-based browser commonly found on Unix-based systems.

Cron : System process that initiates timed events.

Background Information
Concept: OANDA
OANDA was created in 1995 as the Internet arm of Olsen & Associates (O&A), a firm based
in Zurich, Switzerland. OANDA has one of the world's largest historical, high frequency,
filtered currency databases.

Concept: FXP
Foreign Exchange Protocol™ (FXP) is the method OANDA uses to allow the retrieving of
currency rates over the Internet. It is a request-send model similar to HTTP which
facilitates the capturing of "raw" data from OANDA servers for inclusion into client
applications.

Users can receive single conversion or time series; specify bid or ask prices; obtain
mean, minimum, and maximum prices; specify the day of conversion from yesterday as far
back as 1990; get a list of currency symbols; and translate a currency symbol into the
currency name on 167 FX instruments. 

The server listens for connections to TCP port 5011. 

Requests and responses are transmitted using the ASCII character set. Each request
consists of a number of lines of text, followed by a single blank line.

Each response consists of a number of lines of header text, followed by a single
blank line, optionally followed by a number of lines of data, followed by a single
blank line. All lines of text (including blank lines) are terminated by the two
character sequence <carriage return> <line feed>. 

Concept: TCP socket connection
TCP sockets are the means for reliable two-way communication over the Internet. It
consists of two sockets, actually: one for the client and one for the server. PHP
has the ability to make connections via sockets, including TCP sockets. This involves
specifying the server, port number, and protocol.

Concept: PHP CGI version for command line operation
PHP can be installed as both an Apache module and CGI. The cgi version allows you to
run it from the command line. However, if you have lynx installed, then you can just
as well call a php web page from the command line without the cgi version of PHP.

Concept: Cron for automatic program execution
Anything can be built in PHP, but cron does a fine job so we won't bother re-creating
it. In particular, we will be utilizing the user's crontab file. This file contains
entries representing a command to be executed and the schedule to be followed. The
system will check this file constantly to maintain whatever schedule has been assigned
to the execution of the commands.

When using cron, the entries must use absolute paths because it will not know the
environment settings that you are used to when you are logged in to your shell.

Prerequisites
You must have PHP 4.0.1pl2 or better, and have an Internet connection to access the
OANDA server. You must also provide a path to a writable directory for the data files
manipulated by the script.

If you use Unix cron to create daily updates, you will be expected to understand the
basic nature of this process.

How it Works
This script works by defining two functions and then using them to retrieve all
available currency conversion rates, which are then recorded into a PHP include file.
A crontab file is established for automatic regular execution of the script.

The procedure is as follows:

Define a function to retrieve all available currencies. 


Define a function to retrieve the conversion rate for a currency. 


Use the functions to update an include file with the currency rates. 


Setup your Cron Job. 
Define a function to retrieve all available currencies. 
As of this writing there are 169 currencies available from OANDA. But which ones? The
FXP provides for a means to query OANDA about the available ones. This functionality
is captured in a user-defined function for repeated use later. 

The function defined here follows closely the FXP query: currencies request, hence
the name. By not providing a particular currency, FXP returns all. On the other hand,
to get a particlar currency name, that individual currency needs to be specified.

The socket is opened with a 3 second time delay. Notice the reference variables used
to catch the error information. If no error is generated, the query is sent to the
remote server. We then look for an OK response and proceed to look for the first data
after a blank line. The value of the response is trimmed to avoid the effect of the
newline. Also, if the flag is set, we expect to see lots of additional information,
and stores it accordingly.

Code Flow
Define the custom querycurrencies() function with optional parameter. 


Initialize variables and open a socket connection to an Internet socket. 


Determine whether connection was successful; stop and print error if failure. 


Upon successful connection, make request. 


Test success of query and set to "na" if there was an error. 


Return trimmed value of quote response. 

function querycurrencies($code="") { 
    // initialize vars 
    $codeline=$flag=$err_num=$err_msg=""; 
    // get single code or all of them? 
    if ($code!="") { 
        // to be added to query for single lookup 
        $codeline="\r\nquotecurrency: $code"; 
    } 
    else { 
        // flag for collecting all currency codes 
        $flag="all"; 
    } 
     
    // connect to port 5011 with 5-second timeout 
    // error vars must be references 
    $s=fsockopen("www.oanda.com", 5011, &$err_num, &$err_msg, 5); 
    if (!$s) { 
        // no connection; print or log msg 
        echo "$err_msg ($err_num)<br>\n"; 
        $resp="na";  // prevent breaking script 
    } 
    else { 
        // send request; add extra blank line (\r\n) 
        fputs($s,"fxp/1.1\r\nquery: currencies$codeline\r\n\r\n"); 
        $resp=fgets($s,128); 
        // use trim to ignore whitespace 
        // check response for accepted request 
        if (trim($resp)=="fxp/1.1 200 ok") { 
            // skip past first blank line 
            while ($resp!="\r\n") { 
                $resp=fgets($s,128); 
            } 
            // get first line of 'good' data 
            $resp=fgets($s,128); 
            // read remaining lines if flag is set 
            if ($flag=="all") { 
                // read up to next blank line 
                while ($resp2!="\r\n") { 
                    // need to read lines separately  
                     //into temp var for checking 
                    $resp2=fgets($s,128); 
                    // concatenate to the keeper 
                    $resp.=$resp2; 
                } 
            } 
        } 
        else { 
            $resp="na"; 
        } 
    } 
    fclose($s); 
    // trim whitespace beforehand 
    return trim($resp); 
} 

Define a function to retrieve the conversion rate for a currency. 
This function is very similar to the previous one, only less complicated.

Code Flow
Define the custom quotecurrency() function with optional parameter. 


Initialize variables and open a socket connection to an Internet socket. 


Determine whether connection was successful; stop and print error if failure. 


Upon successful connection, make request. 


Test success of query and set to "na" if there was an error. 


Return trimmed value of quote response. 

function quotecurrency($code,$base="USD") { 
    $err_num=$err_msg=""; 
    $s=fsockopen("www.oanda.com", 5011, &$err_num, &$err_msg, 3); 
    if (!$s) { 
        echo "$err_msg ($err_num)<br>\n"; 
        $resp="na";  // prevent breaking script 
    } 
    else { 
        fputs($s,"fxp/1.1\r\nbasecurrency: $base\r\nquotecurrency: $code\r\n\r\n"); 
        $resp=fgets($s,128); 
        if (trim($resp)=="fxp/1.1 200 ok") { 
            while ($resp!="\r\n") { 
                $resp=fgets($s,128); 
            } 
            if(!$resp=fgets($s,128)) { 
                // timeout? then skip 
                $resp="na"; 
            } 
            print "$resp\n"; 
        } 
        else { 
            $resp="na"; 
        } 
    } 
    fclose($s); 
    return trim($resp); 
} 

Use the functions to update an include file with the currency rates.
At this point you are actually in the body of the code. Save the path into a variable
for later use. Then provide a list of currency codes to look up. In this example you
will utilize your custom querycurrencies() function to retrieve all of them into an
array. As you loop through the currency codes, you use your custom quotecurrency()
function to retrieve the USD conversion rate. Each rate is stored in the writable
file as PHP code.

Code Flow
Retrieve current currency names and store into an array. 


Open designated file where you will save rates. 


Loop through the rates, fetching currency name and quote. 
$ratesfile="/home/staff/gnhurst/data/rates.inc"; 

$currencies=split("\n",querycurrencies()); 
$count=count($currencies); // store count for use in loop 

$fp=fopen($ratesfile,"w"); 
fputs($fp,"<?\n"); 

for($i=0; $i<$count; $i++) { 
        $c=substr($currencies[$i],0,3); 
        $new_rate=quotecurrency($c); 
        fputs($fp, "\$$c=\"$new_rate\";\n"); 
} 

fputs($fp,"?>\n"); 
fclose($fp); 
echo "$i currencies updated.\n"; 

Tips
Instead of tracking the conversion rates of all currencies, you could also keep your
own list. For example, hard-code your own array with just a few currency codes.

Use the include file in other PHP scripts to immediately gain access to the currency
rates. 

Setup Your Cron Job. 
Note: This applies to Unix/Linux users.

The basic procedure is to:

Determine whether you will use the PHP Apache module or CGI version. 


Create the appropriate crontab entry. 
Setting up a cron job is laid out fairly well at
http://www.uwsg.iu.edu/usail/automation/cron.html, (if you can't access the crontab
manpage). 

The edit option crontab -e for the crontab command copies or creates the current
user's crontab file. When the crontab entries are executed at the scheduled time,
crontab mails you the results automatically. You can suppress this mail from being
sent by redirecting the output to a file.

CGI Approach
The following file is a sample crontab entry.

0 01 * * * /usr/local/bin/php /home/staff/gnhurst/update.php 2>1 >>/home/staff/gnhurst/update.log 
Tip: You must use the full URL for commands named in the crontab file.

To call a PHP script from crontab, you can have a CGI version of PHP installed.
This can co-exist with a Apache module version of PHP.

If you have access to your sysadmin, here is a quick way to have him setup PHP
CGI if you already have the module version installed.

./configure 
make 
make install 
This copies a 'php' standalone executable to /usr/local/bin.

Don't forget to add #!/usr/local/bin/php -q as the first line of your PHP CGI
script. Don't forget to call php with that -q option to suppress HTTP headers.

Lynx Approach.
If you do not wish or are not able to compile PHP as a standalone executable,
you can run a regular PHP script with Lynx as follows:

lynx -dump http://www.yourdomain.com/path/to/your/script.php 
Put this into your crontab. You will probably need use the /usr/bin/lynx path
for lynx.

The Script
The following is completely commented sample code. 

Note: The PHP elements are found within the "<?PHP" and "?>" marks. 
The code contains comments preceded by "//" marks. 

#!/usr/local/bin/php 
<? 
function querycurrencies($code="") { 
    // initialize vars 
    $codeline=$flag=$err_num=$err_msg=""; 
    // get single code or all of them? 
    if ($code!="") { 
        // to be added to query for single lookup 
        $codeline="\r\nquotecurrency: $code"; 
    } 
    else { 
        // flag for collecting all currency codes 
        $flag="all"; 
    } 
     
    // connect to port 5011 with 5-second timeout 
    // error vars must be references 
    $s=fsockopen("www.oanda.com", 5011, &$err_num, &$err_msg, 5); 
    if (!$s) { 
        // no connection; print or log msg 
        echo "$err_msg ($err_num)<br>\n"; 
        $resp="na";  // prevent breaking script 
    } 
    else { 
        // send request; add extra blank line (\r\n) 
        fputs($s,"fxp/1.1\r\nquery: currencies$codeline\r\n\r\n"); 
        $resp=fgets($s,128); 
        // use trim to ignore whitespace 
        // check response for accepted request 
        if (trim($resp)=="fxp/1.1 200 ok") { 
            // skip past first blank line 
            while ($resp!="\r\n") { 
                $resp=fgets($s,128); 
            } 
            // get first line of 'good' data 
            $resp=fgets($s,128); 
            // read remaining lines if flag is set 
            if ($flag=="all") { 
                // read up to next blank line 
                while ($resp2!="\r\n") { 
                    // need to read lines separately  
                     //into temp var for checking 
                    $resp2=fgets($s,128); 
                    // concatenate to the keeper 
                    $resp.=$resp2; 
                } 
            } 
        } 
        else { 
            $resp="na"; 
        } 
    } 
    fclose($s); 
    // trim whitespace beforehand 
    return trim($resp); 
} 

function quotecurrency($code,$base="USD") { 
    $err_num=$err_msg=""; 
    $s=fsockopen("www.oanda.com", 5011, &$err_num, &$err_msg, 3); 
    if (!$s) { 
        echo "$err_msg ($err_num)<br>\n"; 
        $resp="na";  // prevent breaking script 
    } 
    else { 
        fputs($s,"fxp/1.1\r\nbasecurrency: $base\r\nquotecurrency: $code\r\n\r\n"); 
        $resp=fgets($s,128); 
        if (trim($resp)=="fxp/1.1 200 ok") { 
            while ($resp!="\r\n") { 
                $resp=fgets($s,128); 
            } 
            if(!$resp=fgets($s,128)) { 
                // timeout? then skip 
                $resp="na"; 
            } 
            print "$resp\n"; 
        } 
        else { 
            $resp="na"; 
        } 
    } 
    fclose($s); 
    return trim($resp); 
} 

// path to writable file 
$ratesfile="/home/staff/gnhurst/data/rates.inc"; 

// get list of available currencies and store as array 
$currencies=split("\n",querycurrencies()); 
$count=count($currencies); // store count for use in loop 

// open file for writing 
$fp=fopen($ratesfile,"w"); 
// we are writing PHP code into it 
fputs($fp,"<?\n"); 

// loop through all elements in your array of currencies 
for($i=0; $i<$count; $i++) { 
    // first three letters are the valid currency code 
    $c=substr($currencies[$i],0,3); 
    // get rate for this currency code with USD as base 
    $new_rate=quotecurrency($c); 
    // write code to file; pay attention to escapes 
    fputs($fp, "\$$c=\"$new_rate\";\n"); 

} 
// finishing touches 
fputs($fp,"?>\n"); 
fclose($fp); 
echo "$i currencies updated.\n"; 
?>

Copyright © 2000 - 2001 by Zend Technologies Ltd. 

